" Make sure to make Vim behave in a more useful way
set nocompatible

" Enable syntax highlighting
syntax on

" Colorscheme see https://github.com/hukl/Smyck-Color-Scheme
set term=xterm-256color
color smyck

" Add line numbers
set number
set ruler

" Set encoding
set encoding=utf-8

" Whitespace stuff
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" Have Vim jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

" Have Vim load indentation rules according to the detected filetype.
if has("autocmd")
  filetype indent on
  filetype plugin on
endif

set autowrite   " Automatically save before commands like :next and :make
set ignorecase  " Do case insensitive matching
set showcmd     " Show (partial) command in status line.
set showmatch   " Show matching brackets.
set smartcase   " Do smart case matching
set autoindent
set confirm
set nofoldenable " Disable code folding
set foldmethod=syntax
set history=1000
set modeline
set scrolloff=3
set sidescroll=1
set sidescrolloff=3
set wildmode=longest,list,full

" Strip trailing whitespaces on each save
"fun! <SID>StripTrailingWhitespaces()
"    let l = line(".")
"    let c = col(".")
"    %s/\s\+$//e
"    call cursor(l, c)
"endfun
"autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" Map Ctrl+l to clear highlighted searches
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>

" Highlight characters behind the 80 chars margin
":au BufWinEnter * let w:m2=matchadd('ColumnMargin', '\%>80v.\+', -1)


set title
set titlelen=0
set titlestring=%F%(\ %m%)%(\ %r%)%(\ %y%)%(\ [%{&fileencoding}]%)%(\ %a%)

set fileencodings=ucs-bom,utf-8,default,latin1,macintosh

" Highlight trailing whitespace
highlight RedundantSpaces term=standout ctermbg=yellow guibg=yellow
match RedundantSpaces /\s\+$\| \+\ze\t/

" Define paste-toggle (needed when autoindent is on)
set pastetoggle=<F12>

" Spell checking
set spelllang=de
autocmd FileType mail setlocal spell " Use spell in mail
autocmd BufRead,BufNewFile *.md setlocal spell " Use spell in markdown
autocmd BufRead,BufNewFile *.tex setlocal spell " Use spell in TeX
autocmd FileType gitcommit setlocal spell spelllang=en_us " Use spell in git commit messages

" Use system clipboard
if has('unnamedplus')
  set clipboard=unnamed,unnamedplus
endif

" Disable auto-comments
au FileType * set comments=""

" Reset textwidth for Git commit files
au FileType gitcommit set tw<

" Close open HTML/XML tags (with <CTRL-_>)
au FileType html,eruby let b:closetag_html_style=1
au Filetype html,eruby,xml,xsl ru macros/closetag.vim

" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru}    set ft=ruby

" Use Ruby completion
if has("ruby")
  au FileType ruby,eruby ru autoload/rubycomplete.vim|set omnifunc=rubycomplete#Complete|let g:complType="\<C-X>\<C-O>"|let g:rubycomplete_buffer_loading=1|let g:rubycomplete_rails=1|let g:rubycomplete_classes_in_global=1
endif

" add json syntax highlighting
au BufNewFile,BufRead *.json set ft=javascript

" make Python follow PEP8 ( http://www.python.org/dev/peps/pep-0008/ )
au FileType python set softtabstop=4 tabstop=4 shiftwidth=4 textwidth=79

" Toggle completion mode
imap <expr> <F9> ToggleFileCompl()
imap <expr> <F10> ToggleOmniCompl()

func! ToggleFileCompl()
  if g:complType == "\<C-X>\<C-F>"
    let g:complType = "\<C-X>\<C-P>"
    echo "Keyword Local completion"
  else
    let g:complType = "\<C-X>\<C-F>"
    echo "File name completion"
  endif
  return ''
endfunc

func! ToggleOmniCompl()
  if g:complType == "\<C-X>\<C-O>"
    let g:complType = "\<C-X>\<C-P>"
    echo "Keyword Local completion"
  else
    let g:complType = "\<C-X>\<C-O>"
    echo "Omni completion"
  endif
  return ''
endfunc

" Those are Ruby files, too
au BufRead,BufNewFile Rakefile,*.rake,Capfile,*.cap set filetype=ruby

" Ruby allows punctuation in keywords
au FileType ruby set iskeyword+=33,63

